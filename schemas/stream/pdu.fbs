//***************************************************************************
// Copyright (c) 2025 for information on the respective copyright owner
// see the NOTICE file and/or the following repository:
//     https://github.com/boschglobal/automotive-bus-schema
//
// SPDX-License-Identifier: Apache-2.0
//***************************************************************************



/**
    IDL for Automotive Bus - Stream Interface - PDUs
    ================================================

    * General PDU MIME type
        MIME type : application/x-automotive-bus; interface=stream; type=pdu; schema=fbs; 
                    swc_id=1; ecu_id=2
        Flatbuffers file identifier : SPDU

    * FlexRay PDU MIME type
        MIME type : application/x-automotive-bus; interface=stream; type=pdu; schema=fbs; 
                    ecu_id=1; cc_id=0; swc_id=1; vcn=2; pon=off
        Flatbuffers file identifier : SPDU

    This stream contains PDU Objects. Each PDU Object may include optional
    descriptive metadata, such as an associated PDU 'Type', which may be used
    to model (or represent) processing behaviour related to that PDU.


    Supporting Metadata
    -------------------

        * CAN
        * IP
            * SOME/IP
            * DoIP
        * FlexRay


    Encoding examples
    -----------------

        Key:
            '[]' - Table object.
            '<>' - Vector object.
            '@0' - Offset to following object (relative to current position in stream).


    Minimal PDU (no payload):
        [Stream:pdus=@0]
        <@0,@1>
        [Pdu:id=1]
        [Pdu:id=2]

    PDU with payload:
        [Stream:pdus=@0]
        <@0>
        [Pdu:id=1,payload=@0]
        <0x01,0x02,0x03>

    PDU with associated transport metadata:
        [Stream:pdus=@0]
        <@0>
        [Pdu:id=1,payload=@0,transport=@1]
        <0x01,0x02,0x03>
        [CanMessageMetadata:ExtendedFrameFormat=1]

    PDUs with shared transport metadata:
        [Stream:pdus=@0]
        <@0,@2>
        [Pdu:id=1,payload=@0,transport=@3]
        <0x01,0x02,0x03>
        [Pdu:id=2,payload=@0,transport=@1]
        <0x04,0x05,0x06>
        [CanPduMetadata:ExtendedFrameFormat=1]


    References
    ----------

    * Flatbuffers documentation : https://flatbuffers.dev/
    * Automotive Bus Schemas : https://github.com/boschglobal/automotive-bus-schema
        * Toolchains : https://github.com/boschglobal/automotive-bus-schema/tree/main/docker
        * Releases (generated code) : https://github.com/boschglobal/automotive-bus-schema/releases

*/

/// Namespace for generated code.
namespace AutomotiveBus.Stream.Pdu;



/**
    CAN Message Metadata
    --------------------
*/
enum CanMessageFormat:byte{
    /// CAN Base Format (pdu.id is 11-bits).
    BaseFrameFormat     = 0,
    /// CAN Extended Format (pdu.id is 29-bits).
    ExtendedFrameFormat = 1,
    /// CAN FD Base Format (pdu.id is 11-bits).
    FdBaseFrameFormat = 2,
    /// CAN FD Extended Format (pdu.id is 29-bits).
    FdExtendedFrameFormat = 3,
}

enum CanFrameType:byte{
    /// CAN Data Frame.
    DataFrame = 0,
    /// CAN Remote Frame.
    RemoteFrame = 1,
    /// CAN Error Frame.
    ErrorFrame = 2,
    /// CAN Overload Frame.
    OverloadFrame = 3,
}

table CanMessageMetadata {
    /// CAN: Message Format.
    message_format:CanMessageFormat = BaseFrameFormat;
    /// CAN: Frame Type.
    frame_type:CanFrameType = DataFrame;
    /// CAN: Interface ID of the Interface _sending_ this PDU.
    interface_id:uint32;
    /// CAN: Network ID of the network that _carries_ this PDU.
    network_id:uint32;
}


/**
    Socket Adapter Metadata
    -----------------------
*/
table DoIpMetadata {
    /// DoIP: Protocol Version.
    protocol_version:uint8;
    /// DoIP: Payload Type.
    payload_type:uint16;
}

table SomeIpMetadata {
    /// SOME/IP: Message ID.
    message_id:uint32;
    /// SOME/IP: Message Length.
    length:uint32;
    /// SOME/IP: Request ID.
    request_id:uint32;
    /// SOME/IP: Protocol Version.
    protocol_version:uint8;
    /// SOME/IP: Interface Version.
    interface_version:uint8;
    /// SOME/IP: Message Type.
    message_type:uint8;
    /// SOME/IP: Return code.
    return_code:uint8;
}

union SocketAdapter {
    /// DoIp: Diagnostic Communication over Internet Protocol.
    do_ip:DoIpMetadata,
    /// Some/IP: Scalable service-Oriented Middleware over IP.
    some_ip:SomeIpMetadata,
}


/**
    IP Message Metadata
    -------------------
*/
enum IpProtocol:uint8 {
    None = 0,
    Tcp = 6,
    Udp = 17,
}

struct IpAddressV6 {
    v0:uint16;
    v1:uint16;
    v2:uint16;
    v3:uint16;
    v4:uint16;
    v5:uint16;
    v6:uint16;
    v7:uint16;
}

table IpV4 {
    src_addr:uint32;
    dst_addr:uint32;
}

table IpV6 {
    src_addr:IpAddressV6;
    dst_addr:IpAddressV6;
}

union IpAddr {
    v4:IpV4,
    v6:IpV6,
}

table IpMessageMetadata {
    /**
        Ethernet (IEEE 802.1Q)
        ----------------------
    */
    /// Ethernet: Destination MAC (stored in lower 48-bits, transmission order).
    ///  example: uint64 := XX-XX-01-23-45-67-89-AB
    eth_dst_mac:uint64;
    /// Ethernet: Source MAC (stored in lower 48-bits, transmission order).
    ///  example: uint64 := XX-XX-01-23-45-67-89-AB
    eth_src_mac:uint64;
    /// Ethernet: EtherType.
    eth_ethertype:uint16;

    /// Ethernet: TCI: Priority code point.
    eth_tci_pcp:uint8;
    /// Ethernet: TCI: Drop eligible indicator.
    eth_tci_dei:uint8;
    /// Ethernet: TCI: VLAN identifier.
    eth_tci_vid:uint16;

    /**
        IP Protocols
        ------------
    */
    /// IP: Address.
    ip_addr:IpAddr;
    /// IP: Protocol Specifier.
    ip_protocol:IpProtocol;
    /// IP: TCP/UDP Source Port.
    ip_src_port:uint16;
    /// IP: TCP/UDP Destination Port.
    ip_dst_port:uint16;

    /**
        Adapter Protocols
        -----------------
    */
    adapter:SocketAdapter;
}


/**
    Struct Metadata
    ---------------
*/

table StructMetadata {
    /// Struct: Name of the struct type.
    type_name:string;
    /// Struct: Name of the struct instance/variable.
    var_name:string;
    /// Struct: Encoding used to package the struct instance/variable (default is 'memcpy').
    encoding:string;

    // Struct: Attribute aligned.
    attribute_aligned:uint16;
    // Struct: Attribute packed.
    attribute_packed:bool;

    // Struct: Platform architecture (of the producing system).
    platform_arch:string;
    // Struct: Platform architecture (of the producing system).
    platform_os:string;
    // Struct: Platform architecture (of the producing system).
    platform_abi:string;
}


/**
    FlexRay Tables
    --------------
*/

struct FlexrayNodeIdentifier {
    ecu_id:uint16;
    cc_id:uint16;
    swc_id:uint32;
}

enum FlexrayBitrate: byte {
    None = 0,
    BR10Mbps = 1,
    BR5Mbps = 2,
    BR2_5Mbps = 3,
}

enum FlexrayDirection:byte {
    None = 0,
    Rx = 1,
    Tx = 2,
}

enum FlexrayTransmitMode: byte {
    None = 0,
    Continuous = 1,
    SingleShot = 2,
}

enum FlexrayChannel: byte {
    None = 0,
    A = 1,
    B = 2,
    AB = 3,
}

enum FlexrayChannelStatus: byte {
    A = 0,
    B = 1,
}

enum FlexrayTransceiverState:byte {
    None = 0,
    NoPower = 1,
    NoConnection = 2,
    NoSignal = 3,
    CAS = 4,
    WUP = 5,
    FrameSync = 6,
    FrameError = 7,
}

enum FlexrayPocState:byte {
    DefaultConfig = 0,
    Config = 1,
    Ready = 2,
    Wakeup = 3,
    Startup = 4,
    NormalActive = 5,
    NormalPassive = 6,
    StateHalt = 7,
    Freeze = 8,
    Undefined = 9,
}

enum FlexrayPocCommand:byte {
    None = 0,
    Config = 1,
    Ready = 2,
    Wakeup = 3,
    Run = 4,
    AllSlots = 5,
    Halt = 6,
    Freeze = 7,
    Coldstart = 8,
    Nop = 9,
}

enum FlexrayLpduStatus: byte {
    None = 0,
    Transmitted = 1,
    NotTransmitted = 2,
    Received = 3,
    NotReceived = 4,
}

enum FlexrayConfigOp:byte {
    Set = 0,
    FrameTableSet = 1,
    FrameTableMerge = 2,
    FrameTableDelete = 3,
}

/**
    FlexRay Config Metadata
    -----------------------
*/

table FlexrayConfig {
    /**
        Node Config Properties (Codec internal)
        ----------------------
    */
    /// Config: Node configured Virtual Coldstart Nodes.
    vcn:[FlexrayNodeIdentifier];

    /**
        FlexRay Controller Properties
        -----------------------------
    */
    /// Config: Macroticks per communication cycle (10..16000 MT).
    macrotick_per_cycle:uint16;
    /// Config: Microticks per communication cycle (640..640000 uT).
    microtick_per_cycle:uint32;
    /// Config: Start of network idle, marks start-of-end of communication cycle (7..15997 MT).
    network_idle_start:uint16;
    /// Config: Length of a static slot (4..659 MT).
    static_slot_length:uint16;
    /// Config: Number of static slots (2..1023).
    static_slot_count:uint16;
    /// Config: Length of a mimi slot (2..63 MT).
    minislot_length:uint8;
    /// Config: Number of mini slots (0..7986).
    minislot_count:uint16;
    /// Config: Static segment payload length (0..254 bytes).
    static_slot_payload_length:uint32;

    /// Config: The FlexRay bitrate.
    bit_rate:FlexrayBitrate;
    /// Config: Channels enabled.
    channel_enable:FlexrayChannel;

    /**
        Coldstart & Sync Config Properties
        ----------------------------------
    */
    /// Config: Coldstart node (1=yes, 0=no).
    coldstart_node:bool;
    /// Config: Sync node (1=yes, 0=no).
    sync_node: bool;
    /// Config: Coldstart attempts (2..31).
    coldstart_attempts:uint8;
    /// Config: Wakeup channel selector (0=A, 1=B).
    wakeup_channel_select:uint8;
    /// Config: Startup in single slot mode.
    single_slot_enabled:bool;
    /// Config: Key slot id (for simplified startup).
    key_slot_id:uint16;
    /// Config: Key slot Payload (related to LPDU).
    key_slot_payload:[uint8];
    /// Config: Key slot LPDU (for startup with payload).
    key_slot_lpdu:FlexrayLpdu;

    /**
        Frame Config Table
        ------------------
    */
    /// Config: Frame/LPDU static config table.
    frame_table:[FlexrayLpduConfig];
    /// Config: Config operation, relates specifically to 'frame_table'.
    config_op: FlexrayConfigOp;
}

/**
    FlexRay Status Metadata
    -----------------------
*/

table FlexrayStatus {
    /// Status: The macrotick (MT) associated with the containing PDU Stream Object.
    macrotick:uint16;
    /// Status: The cycle count associated with the containing PDU Stream Object.
    cycle:uint8;
    // Reserved.
    reserved:uint16;

    /// Status: Channel A: Transceiver State.
    tcvr_state_cha:FlexrayTransceiverState;
    /// Status: Channel B: Transceiver State.
    tcvr_state_chb:FlexrayTransceiverState;

    /// Status: Channel A: State of the FlexRay POC.
    poc_state_cha:FlexrayPocState;
    /// Status: Channel B: State of the FlexRay POC.
    poc_state_chb:FlexrayPocState;

    /// Status: Channel A: A POC command.
    poc_command_cha:FlexrayPocCommand;
    /// Status: Channel B: A POC command.
    poc_command_chb:FlexrayPocCommand;
}

/**
    FlexRay LPDU Metadata
    ---------------------
*/

table FlexrayLpdu {
    /// Frame: Cycle the frame was received on.
    cycle:uint8;

    /// Frame: Index into Frame Config table.
    frame_config_index:uint16;
    
    /// Frame: The frame header has the 'Null Frame' indicator set.
    null_frame:bool;
    /// Frame: The frame header has the 'Null Frame' indicator set.
    sync_frame:bool;
    /// Frame: The frame header has the 'Null Frame' indicator set.
    startup_frame:bool;
    /// Frame: The frame header has the 'Null Frame' indicator set.
    payload_preamble:bool;
    
    /// Frame: Status of this frame (actual/observed status).
    status:FlexrayLpduStatus;
}

table FlexrayLpduConfig {
    /// Config: Slot ID of the frame.
    slot_id:uint16;
    /// Config: Payload length.
    payload_length:uint8;
    /// Config: Number of cycles between frame transmission.
    cycle_repetition:uint8;
    /// Config: Cycle when frame is first sent.
    base_cycle:uint8;

    /// Config: Index into the FlexrayConfig.frame_table (self reference).
    frame_table_index:uint16;
    /// Config: FlexRay controller/interface internal reference.
    lpdu_table_index:uint16;
    
    /// Config: Frame direction.
    direction:FlexrayDirection;
    /// Config: Channels the frame will be sent over.
    channel:FlexrayChannel;
    /// Config: Transmit mode of the frame.
    transmit_mode:FlexrayTransmitMode;
    /// Frame: Status of this frame (actual/observed status).
    status:FlexrayLpduStatus;
}

/**
    FlexRay Metadata
    ----------------
*/

union FlexrayMetadataType {
    Lpdu:FlexrayLpdu,
    Config:FlexrayConfig,
    Status:FlexrayStatus,
}

table FlexrayMetadata {
    node_ident:FlexrayNodeIdentifier;

    /// FlexRay Metadata can be one of several Tables.
    metadata:FlexrayMetadataType;
}


/**
    PDU Object / Stream
    -------------------
*/
union TransportMetadata {
    Can:CanMessageMetadata,
    Ip:IpMessageMetadata,
    Struct:StructMetadata,
    Flexray:FlexrayMetadata,
}

table Pdu {
    /// PDU: Identifier.
    id:uint32;
    /// PDU: Payload (DLC is vector length).
    payload:[uint8];
    /// PDU: Transport metadata relating to this PDU (optional).
    transport:TransportMetadata;

    /**
        Identifying Properties
        ----------------------
        These fields are (typically) encoded as a part of the MIMEtype which
        configures the source of a PDU stream. They may however also be 
        encoded in the TransportMetadata if appropriate.
    */
    /// Identifier: SWC ID of SWC _originating_ this PDU.
    swc_id:uint32;
    /// Identifier: ECU ID of ECU _originating_ this PDU.
    ecu_id:uint32;
}

table Stream {
    /// STREAM: PDU Vector.
    pdus:[Pdu];

    /// Metadata: Node UID of the Simulation (or System) node which is sending
    ///  this stream object. Used by a Node to detect incoming stream objects
    ///  which the Node had previously sent (i.e. an echo from the underlying
    ///  implementation of the stream transport).
    node_uid:uint32;

    /// Metadata: Simulation Time when this stream was produced.
    simulation_time:double;
}

root_type Stream;
file_identifier "SPDU"; // Stream of PDUs.

